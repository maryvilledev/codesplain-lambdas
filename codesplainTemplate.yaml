---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Codesplain API and Lambda Functions
Resources:

  Authorize:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - Authorize-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/Authorize.zip
         - { lambda_version: !Ref S3Version }
      Description: Validates that a request has a valid token
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role
      Environment:
        Variables:
          CLIENT_ID: !Ref ClientID
          CLIENT_SECRET: !Ref ClientSecret

  AuthorizeToken:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - AuthorizeToken-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/AuthorizeToken.zip
         - { lambda_version: !Ref S3Version }
      Description: Validates that users are allowed to make requests
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role

  GithubAccessCodeGetter:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - GithubAccessCodeGetter-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/GitHubAccessCodeGetter.zip
         - { lambda_version: !Ref S3Version }
      Description: Converts access key to github token using client secret
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role
      Environment:
        Variables:
          IGNORE_WHITELIST: !Ref IgnoreWhitelist
          CLIENT_ID: !Ref ClientID
          CLIENT_SECRET: !Ref ClientSecret
          ORG_WHITELIST: "maryvilledev"

  SaveSnippet:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - SaveSnippet-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/SaveSnippetToS3.zip
         - { lambda_version: !Ref S3Version }
      Description: Converts API Gateway POST to S3 Request
      MemorySize: 192
      Timeout: 4
      Role: !Ref Role
      Environment:
        Variables:
          authorizeTokenName: !Ref AuthorizeToken
          BucketName: !Ref Bucket

  GetSnippet:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - GetSnippet-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/GetSnippetFromS3.zip
         - { lambda_version: !Ref S3Version }
      Description: Converts API Gateway GET to S3 Request
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role
      Environment:
        Variables:
          BucketName: !Ref Bucket

  GetIndexes:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - GetIndexes-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/GetIndexes.zip
         - { lambda_version: !Ref S3Version }
      Description: Returns JSON object of user/org index files
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role
      Environment:
        Variables:
          BucketName: !Ref Bucket

  PutSnippet:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - PutSnippet-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/UpdateSnippetInS3.zip
         - { lambda_version: !Ref S3Version }
      Description: Converts API Gateway PUT to S3 Request
      MemorySize: 192
      Timeout: 5
      Role: !Ref Role
      Environment:
        Variables:
          authorizeTokenName: !Ref AuthorizeToken
          BucketName: !Ref Bucket

  DeleteSnippet:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - DeleteSnippet-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/DeleteSnippetFromS3.zip
         - { lambda_version: !Ref S3Version }
      Description: Converts API Gateway DELETE to S3 Request
      MemorySize: 192
      Timeout: 3
      Role: !Ref Role
      Environment:
        Variables:
          authorizeTokenName: !Ref AuthorizeToken
          BucketName: !Ref Bucket

  CodesplainAPI:
    Type: AWS::Serverless::Api
    Metadata:
      CircleBuild: !Ref "CircleBuild"
    Properties:
      StageName: !Ref "EnvVersion"
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "0.2.1"
          title: !Ref "Title"
        schemes:
        - "https"
        paths:
          "/auth":
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "502":
                  description: "502 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:GithubAccessCodeGetter-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/parsers/{language}":
            get:
              parameters:
              - name: "language"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.path.language: "method.request.path.language"
                uri: !Sub
                 - arn:aws:apigateway:us-west-2:s3:path/codesplain-parsers/{language}/${env}/{language}.min.js
                 - { env: !Ref ParserPath }
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/mappings/{language}":
            get:
              parameters:
              - name: "language"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    contentHandling: "CONVERT_TO_TEXT"
                requestParameters:
                  integration.request.path.language: "method.request.path.language"
                uri: !Sub
                 - arn:aws:apigateway:us-west-2:s3:path/codesplain-parsers/{language}/${env}/{language}.csv
                 - { env: !Ref ParserPath }
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/csv"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/users":
            get:
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:GetIndexes-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/users/{user_id}/snippets":
            get:
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.user_id: "method.request.path.user_id"
                uri: !Sub
                  - arn:aws:apigateway:us-west-2:s3:path/${bucket}/{user_id}/index.json
                  - { bucket: !Ref Bucket}
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "path"
                required: true
                type: "string"
              - name: "SnippetSaveData"
                in: "body"
                required: true
                schema:
                  $ref: "#/definitions/SnippetSaveData"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
              security:
              - GithubAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:SaveSnippet-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/users/{user_id}/snippets/{snippet_id}":
            get:
              produces:
              - "application/json"
              parameters:
              - name: "snippet_id"
                in: "path"
                required: true
                type: "string"
              - name: "user_id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SnippetSaveData"
                "404":
                  description: "404 response"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:GetSnippet-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            put:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "snippet_id"
                in: "path"
                required: true
                type: "string"
              - name: "user_id"
                in: "path"
                required: true
                type: "string"
              - name: "SnippetSaveData"
                in: "body"
                required: true
                schema:
                  $ref: "#/definitions/SnippetSaveData"
              responses:
                "400":
                  description: "400 response"
                "204":
                  description: "204 response"
              security:
              - GithubAuthorizer: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:PutSnippet-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "snippet_id"
                in: "path"
                required: true
                type: "string"
              - name: "user_id"
                in: "path"
                required: true
                type: "string"
              responses:
                "400":
                  description: "400 response"
                "204":
                  description: "204 response"
              security:
              - GithubAuthorizer: []
              x-amazon-apigateway-integration:
                credentials: !Ref Role
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub
                  - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:DeleteSnippet-${version}/invocations"
                  - { version: !Ref EnvVersion}
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key,x-amz-security-token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

        securityDefinitions:
          GithubAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerCredentials: !Ref Role
              authorizerUri: !Sub
                - "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:296636357169:function:Authorize-${version}/invocations"
                - { version: !Ref EnvVersion}
              authorizerResultTtlInSeconds: 0
              type: "token"
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          SnippetSaveData:
            type: "object"
            required:
            - "annotations"
            - "filters"
            - "readOnly"
            - "snippet"
            - "snippetLanguage"
            - "snippetTitle"
            properties:
              snippetTitle:
                type: "string"
                description: "Title of the snippet"
                title: "Snippet Title"
                minLength: 1
                default: "Snippet title"
              snippet:
                type: "string"
                description: "Contents of the snippet"
                title: "Snippet Contents"
                default: "Snippet contents"
              snippetLanguage:
                type: "string"
                title: "Snippet Language"
                enum:
                - "python3"
                - "java"
                default: "python3"
              readOnly:
                type: "boolean"
                title: "Is read-only"
                default: false
              annotations:
                type: "object"
                title: "Annotations"
                properties: {}
              filters:
                type: "object"
                title: "Filters"
                additionalProperties:
                  type: "object"
                  properties:
                    color:
                      type: "string"
                      title: "Color"
                    count:
                      type: "number"
                      title: "Number of Occurrences"
                    prettyTokenName:
                      type: "string"
                      title: "Token display name"
                    selected:
                      type: "boolean"
                      title: "Filter is selected"
                  required:
                  - "color"
                  - "count"
                  - "prettyTokenName"
                  - "selected"
            title: "Snippet"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
  GenerateIndexFiles:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub
       - GenerateIndexFiles-${lambda_version}
       - { lambda_version: !Ref EnvVersion }
      Handler: lambda_function.lambda_handler
      Runtime: python2.7
      CodeUri:
        Bucket: codesplain-lambda-functions
        Key:  !Sub
         - ${lambda_version}/GenerateIndexFiles.zip
         - { lambda_version: !Ref S3Version }
      Description: Generates index files based on the snippets in each user\'s directory
      MemorySize: 192
      Timeout: 30
      Role: !Ref Role
      Environment:
        Variables:
          authorizeTokenName: !Ref AuthorizeToken
          BucketName: codesplain-snippets-dev


Parameters:
  S3Version:
    Description: The Version path to use when pulling S3 Lambdas
    Type: String
  ParserPath:
    Description: Path in the codesplain-parsers S3 Bucket
    Type: String
    Default: "dev"
  EnvVersion:
    Description: Titles for Lambdas
    Type: String
    Default: "dev"
  ClientID:
    Description: Github Local Client Id (From Circle Env Variables)
    Type: String
  ClientSecret:
    Description: Github Local Client Secret (From Circle Env Variables)
    Type: String
  Title:
    Description: Title Of Feature Branch API
    Type: String
  Bucket:
    Description: Bucket to Save Snippets in
    Type: String
    Default: "codesplain-snippets-dev"
  Role:
    Description: Role for developer access
    Type: String
    Default: "arn:aws:iam::296636357169:role/CodesplainS3DevRole"
  CircleBuild:
    Description: Build number that deployed API
    Type: String
    Default: "CircleBuildUnknown"
  IgnoreWhitelist:
    Description: Flag for limiting Github auth to whitelisted ORGs
    Type: String
    Default: "false"
