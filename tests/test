#!/bin/bash

################################################################################
# This script is used to run the postman/newman API tests.                     #
# Example usage:                                                               #
#   ./test --token=<access-token> \                                            #
#          --user=<user> \                                                     #
#          --all                                                               #
################################################################################

# Make sure newman is installed
if [[ -z $(command -v newman) ]]; then
  printf "newman is not installed, please install it before running this script.\n"
  printf "See: https://www.npmjs.com/package/newman\n"
  exit 1
fi

# Default values
VERBOSITY='--reporter-no-assertions'
RUN_AUTH=false
RUN_PARSERS=false
RUN_USERS=false
EXPORT_ENV=false
API_URL='http://api.codesplain.io/dev'
ENV_FILE='env.json'
COLOR='\033[0;36m' # Cyan

# Process all command line flag
VALID_OPTIONS="Valid options are:
  -t | --token=   (GitHub access token for Authorization header)
       --user=    (GitHub user login to use for \"user_id\" in path)
  -v | --verbose  (turns on verbose output)
  -s | --suite=   (sets suite of tests to run; auth, parsers, or users)
  -e | --export   (saves JSON file of environment after completion
                   of specified test suite(s))
  -u | --api-url= (sets the URL to hit when running tests)
  -a | --all      (runs all suites of tests; auth, parsers, & users)
  -h | --help     (displays list of valid options)\n"
for arg in "$@"
do
case $arg in
    -t=*|--token=*)
    ACCESS_TOKEN="${arg#*=}"
    shift;; # past argument

    --user=*)
    USER="${arg#*=}"
    shift;; # past argument

    -v|--verbose)
    VERBOSITY=''
    shift;; # past argument

    -s=*|--suite=*)
    s="${arg#*=}"
    if [ "$s" == "auth" ]; then
      RUN_AUTH=true
    elif [ "$s" == "parsers" ]; then
      RUN_PARSERS=true
    elif [ "$s" == "users" ]; then
      RUN_USERS=true
    else
      printf "Unrecognized suite: $s\n"
      exit 127 # exit code for "option not found"
    fi
    shift;; # past argument

    -e|--export)
    EXPORT_ENV=true
    shift;; # past argument

    -u=*|--api-url=*)
    API_URL="${arg#*=}"
    shift;; # past argument=value

    -a|--all)
    RUN_AUTH=true
    RUN_PARSERS=true
    RUN_USERS=true
    shift;; # past argument

    -h|--help)
    printf "$VALID_OPTIONS"
    exit 127;; # exit code for "option not found"

    *) # unknown option
    printf "Unrecognized option: $arg\n"
    printf "$VALID_OPTIONS"
    exit 127;; # exit code for "option not found"
esac
done

# Create/Truncate environment file for newman
ENV_JSON='{
  "id": "098e3d88-7ec9-681c-6cc6-0e2cededee4c",
  "name": "codesplain-dev",
  "values": [
    {
      "enabled": true,
      "key": "url",
      "type": "text",
      "value": "'$API_URL'"
    },
    {
      "enabled": true,
      "key": "access_token",
      "type": "text",
      "value": "'$ACCESS_TOKEN'"
    },
    {
      "enabled": true,
      "key": "user_id",
      "type": "text",
      "value": "'$USER'"
    },
    {
      "enabled": true,
      "key": "snippet",
      "type": "text",
      "value": "{\"annotations\":{},\"AST\":{\"ast_type\":\"file_input\",\"tags\":[\"file_input\"],\"begin\":0,\"end\":13,\"detail\":[],\"children\":[{\"ast_type\":\"simple_stmt\",\"tags\":[\"simple_stmt\"],\"begin\":0,\"end\":13,\"detail\":[],\"children\":[{\"ast_type\":\"expr\",\"tags\":[\"expr\"],\"begin\":0,\"end\":13,\"detail\":[],\"children\":[{\"ast_type\":\"trailed_atom\",\"tags\":[\"trailed_atom\",\"function_call\"],\"begin\":0,\"end\":13,\"detail\":[{\"handler\":\"docs\",\"template\":\"function_call\",\"name\":\"print\",\"args\":[null]}],\"children\":[{\"ast_type\":\"atom\",\"tags\":[\"atom\"],\"begin\":0,\"end\":5,\"detail\":[],\"children\":[{\"ast_type\":\".NAME\",\"tags\":[\".NAME\"],\"begin\":0,\"end\":5,\"text\":\"print\",\"detail\":[],\"children\":[]}]},{\"ast_type\":\"trailer\",\"tags\":[\"trailer\"],\"begin\":5,\"end\":13,\"detail\":[],\"children\":[{\"ast_type\":\".OPEN_PAREN\",\"tags\":[\".OPEN_PAREN\"],\"begin\":5,\"end\":6,\"text\":\"(\",\"detail\":[],\"children\":[]},{\"ast_type\":\"arglist\",\"tags\":[\"arglist\"],\"begin\":6,\"end\":12,\"detail\":[],\"children\":[{\"ast_type\":\"expr\",\"tags\":[\"expr\"],\"begin\":6,\"end\":12,\"detail\":[],\"children\":[{\"ast_type\":\"atom\",\"tags\":[\"atom\"],\"begin\":6,\"end\":12,\"detail\":[],\"children\":[{\"ast_type\":\"str\",\"tags\":[\"str\"],\"begin\":6,\"end\":12,\"detail\":[],\"children\":[{\"ast_type\":\".STRING_LITERAL\",\"tags\":[\".STRING_LITERAL\"],\"begin\":6,\"end\":12,\"text\":\"test\",\"detail\":[],\"children\":[]}]}]}]}]},{\"ast_type\":\".CLOSE_PAREN\",\"tags\":[\".CLOSE_PAREN\"],\"begin\":12,\"end\":13,\"text\":\")\",\"detail\":[],\"children\":[]}]}]}]}]},{\"ast_type\":\"._EOF\",\"tags\":[\"._EOF\"],\"begin\":13,\"end\":13,\"text\":\"<EOF>\",\"detail\":[],\"children\":[]}]},\"filters\":{},\"hasUnsavedChanges\":true,\"snippetLanguage\":\"python3\",\"readOnly\":false,\"snippet\":\"print('test')\",\"snippetTitle\":\"Test Snippet\"}"
    }
  ],
  "timestamp": 1490716137324,
  "_postman_variable_scope": "environment",
  "_postman_exported_at": "2017-03-28T22:11:54.493Z",
  "_postman_exported_using": "Postman/4.9.3"
}'
echo "$ENV_JSON" > $ENV_FILE

#Run test suite(s) based on command line flags
OPTIONS="-e $ENV_FILE $VERBOSITY --export-environment $ENV_FILE"
EXIT_STATUS=0
if $RUN_AUTH; then
  printf "${COLOR}<<<<<< Running /auth Suite... >>>>>>\n"
  newman run codesplain-auth.json $OPTIONS
  if [[ $EXIT_STATUS == 1 || $? == 1 ]]; then
    EXIT_STATUS=1
  fi
  printf "${COLOR}<<<<<< Done with /auth Suite. >>>>>>\n"
fi
if $RUN_PARSERS; then
  printf "${COLOR}<<<<<< Running /parsers Suite... >>>>>>\n"
  newman run codesplain-parsers.json $OPTIONS
  if [[ $EXIT_STATUS == 1 || $? == 1 ]]; then
    EXIT_STATUS=1
  fi
  printf "${COLOR}<<<<<< Done with /parsers Suite... >>>>>>\n"
fi
if $RUN_USERS; then
  printf "${COLOR}<<<<<< Running /users Suite... >>>>>>\n"
  newman run codesplain-users.json $OPTIONS
  if [[ $EXIT_STATUS == 1 || $? == 1 ]]; then
    EXIT_STATUS=1
  fi
  printf "${COLOR}<<<<<< Done with /users Suite. >>>>>>\n"
fi

# Remove environment file unless --export flag was used
if ! $EXPORT_ENV; then
  rm $ENV_FILE
fi

exit $EXIT_STATUS
